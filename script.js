// // Pole pro ukl√°d√°n√≠ "d√°rk≈Ø" v pamƒõti.
// // Stejn√° struktura jako v na≈°em kontraktu: { sender, recipient, unlockTime, amount, withdrawn }
// let gifts = [];

// function mockCreateGift(sender, recipient, delayInSeconds, amount) {
//   // Simulujeme basic checky:
//   if (!sender || !recipient || !delayInSeconds || !amount) {
//     throw new Error("Missing input fields!");
//   }

//   // Ensure unlockTime is in seconds
//   const currentTimestamp = Math.floor(Date.now() / 1000);
//   const unlockTime = currentTimestamp + Number(delayInSeconds);

//   // Vytvo≈ô√≠me objekt d√°rku
//   const newGift = {
//     sender: sender,
//     recipient: recipient,
//     unlockTime: unlockTime, // Always in seconds
//     amount: amount,
//     withdrawn: false,
//   };

//   // P≈ôid√°me do pole a z√≠sk√°me ID (index)
//   const giftId = gifts.length;
//   gifts.push(newGift);

//   // Vygenerujeme n√°hodnou "transakƒçn√≠ hash"
//   const txHash = "0x" + Math.floor(Math.random() * 1e16).toString(16);

//   return { giftId, txHash };
// }

// // Funkce pro vybr√°n√≠ "d√°rku"
// function mockWithdrawGift(giftId, caller) {
//   if (giftId < 0 || giftId >= gifts.length) {
//     throw new Error("Invalid gift ID");
//   }

//   const gift = gifts[giftId];

//   if (gift.withdrawn) {
//     throw new Error("Gift already withdrawn");
//   }
//   if (caller !== gift.recipient) {
//     throw new Error("Only the recipient can withdraw (mock check)");
//   }
//   if (Math.floor(Date.now() / 1000) < gift.unlockTime) {
//     throw new Error("Not yet unlocked!");
//   }

//   // Oznaƒç√≠me, ≈æe byl vybr√°n
//   gift.withdrawn = true;

//   // Simulace "tx hash"
//   const txHash = "0x" + Math.floor(Math.random() * 1e16).toString(16);

//   return { txHash, amount: gift.amount };
// }

// // Funkce pro vyps√°n√≠ seznamu d√°rk≈Ø do <ul>
// function showAllGifts() {
//   const giftsList = document.getElementById("giftsList");
//   giftsList.innerHTML = ""; // sma≈æe p≈ôedchoz√≠ obsah

//   gifts.forEach((gift, index) => {
//     const li = document.createElement("li");
//     li.textContent = `GiftID: ${index}, Sender: ${gift.sender}, Recipient: ${gift.recipient}, 
//       Amount: ${gift.amount}, UnlockTime: ${gift.unlockTime} (${new Date(gift.unlockTime * 1000)}), Withdrawn: ${gift.withdrawn}`;
//     giftsList.appendChild(li);
//   });
// }

// // P≈ôi kliknut√≠ na "Create Gift"
// document.getElementById("btnCreateGift").addEventListener("click", () => {
//   const sender = document.getElementById("sender").value;
//   const recipient = document.getElementById("recipient").value;
//   const delayInSeconds = document.getElementById("unlockTime").value; // Teƒè je to delay, ne timestamp!
//   const amount = document.getElementById("amount").value;
//   const createResult = document.getElementById("createResult");
//   const createError = document.getElementById("createError");

//   // Vyma≈æeme star√© zpr√°vy
//   createResult.textContent = "";
//   createError.textContent = "";

//   try {
//     const { giftId, txHash } = mockCreateGift(
//       sender,
//       recipient,
//       delayInSeconds,
//       amount
//     );
//     createResult.textContent = `Gift created successfully!
//       Gift ID: ${giftId}, TxHash: ${txHash}`;
//   } catch (err) {
//     createError.textContent = err.message;
//   }
// });

// // P≈ôi kliknut√≠ na "Withdraw Gift"
// document.getElementById("btnWithdrawGift").addEventListener("click", () => {
//   const giftId = parseInt(document.getElementById("giftId").value, 10);
//   const caller = document.getElementById("caller").value;
//   const withdrawResult = document.getElementById("withdrawResult");
//   const withdrawError = document.getElementById("withdrawError");

//   // Vyma≈æeme star√© zpr√°vy
//   withdrawResult.textContent = "";
//   withdrawError.textContent = "";

//   try {
//     const { txHash, amount } = mockWithdrawGift(giftId, caller);
//     withdrawResult.textContent = `Gift withdrawn! TxHash: ${txHash}, You received ${amount}`;
//   } catch (err) {
//     withdrawError.textContent = err.message;
//   }
// });

// // P≈ôi kliknut√≠ na "Show Gifts"
// document.getElementById("btnShowGifts").addEventListener("click", showAllGifts);







document.addEventListener("DOMContentLoaded", function () {
// 1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ethereum —á–µ—Ä–µ–∑ Metamask
// 1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ethereum —á–µ—Ä–µ–∑ Metamask
const web3 = new Web3(window.ethereum);

// 2Ô∏è‚É£ –ê–¥—Ä–µ—Å –∏ ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–ó–ê–ú–ï–ù–ò –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ!)
const CONTRACT_ADDRESS = "0x123456789abcdef..."; // –í—Å—Ç–∞–≤—å –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
const CONTRACT_ABI = [ /* –í—Å—Ç–∞–≤—å ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ Remix –∏–ª–∏ Hardhat */ ];

// 3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
const contract = new web3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);

// 4Ô∏è‚É£ –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Metamask
async function connectWallet() {
    if (window.ethereum) {
        try {
            const accounts = await window.ethereum.request({ method: "eth_requestAccounts" });
            document.getElementById("walletAddress").textContent = `Connected: ${accounts[0]}`;
            console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Metamask:", accounts[0]);
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error);
        }
    } else {
        alert("Metamask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
    }
}

// 5Ô∏è‚É£ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è "–ø–æ–¥–∞—Ä–∫–∞"
async function createGift() {
    const sender = (await web3.eth.getAccounts())[0]; // –ü–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–∑ Metamask
    const recipient = document.getElementById("recipient").value;
    const delayInSeconds = document.getElementById("unlockTime").value;
    const amount = web3.utils.toWei(document.getElementById("amount").value, "ether");

    if (!recipient || !delayInSeconds || !amount) {
        alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
        return;
    }

    try {
        const tx = await contract.methods.createGift(recipient, delayInSeconds).send({
            from: sender,
            value: amount
        });
        alert(`üéâ Gift —Å–æ–∑–¥–∞–Ω! Tx Hash: ${tx.transactionHash}`);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞:", error);
        alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞!");
    }
}

// 6Ô∏è‚É£ –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö "–ø–æ–¥–∞—Ä–∫–æ–≤"
async function showGifts() {
    const count = await contract.methods.getGiftCount().call();
    const giftsList = document.getElementById("giftsList");
    giftsList.innerHTML = "";

    for (let i = 0; i < count; i++) {
        const gift = await contract.methods.getGift(i).call();
        
        const li = document.createElement("li");
        li.textContent = `GiftID: ${i}, Sender: ${gift.sender}, Recipient: ${gift.recipient}, 
                          Amount: ${web3.utils.fromWei(gift.amount, "ether")} ETH, UnlockTime: ${new Date(gift.unlockTime * 1000)}, Withdrawn: ${gift.withdrawn}`;
        giftsList.appendChild(li);
    }
}

// 7Ô∏è‚É£ –§—É–Ω–∫—Ü–∏—è "–≤—ã–≤–æ–¥–∞" –ø–æ–¥–∞—Ä–∫–∞
async function withdrawGift() {
    const giftId = document.getElementById("giftId").value;
    const caller = (await web3.eth.getAccounts())[0];

    if (!giftId) {
        alert("–í–≤–µ–¥–∏—Ç–µ Gift ID!");
        return;
    }

    try {
        const tx = await contract.methods.withdrawGift(giftId).send({ from: caller });
        alert(`üéâ Gift withdrawn! Tx Hash: ${tx.transactionHash}`);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞:", error);
        alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ø–æ–¥–∞—Ä–∫–∞!");
    }
}

// 8Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
document.getElementById("connectWallet").addEventListener("click", connectWallet);
document.getElementById("btnCreateGift").addEventListener("click", createGift);
document.getElementById("btnWithdrawGift").addEventListener("click", withdrawGift);
document.getElementById("btnShowGifts").addEventListener("click", showGifts);

// 9Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
connectWallet();
});

